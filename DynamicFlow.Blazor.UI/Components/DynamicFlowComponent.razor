
@* @using DynamicFlow.Models.DTOs
@using DynamicFlow.Models.Exceptions
@using DynamicFlow.Models.Generic
@using System.Text.Json
@inject IFlowRepositoryService _repository
<EditForm Model="flowProperties">
	<div class="modal" style="@DialogVisibility" tabindex="-1" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">@FlowTitle</h5>
					<button type="button" @onclick="CloseForm" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					@if (flowProperties is not null && flowProperties.Any() && IsVisible == true)
					{
						@RenderControls(dynamicFlow?.Flow ?? throw new NullModelException(), flowProperties)
						;
					}
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" @onclick="SaveButton" style="background-color:@dynamicFlow?.Flow?.ButtonColor;@SaveButtonVisibility">@dynamicFlow?.Flow?.ButtonText</button>
					<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseForm">Close</button>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {

	[Parameter]
	public string FlowTitle { get; set; } = string.Empty;
	[Parameter]
	public bool IsVisible { get; set; }
	[Parameter]
	public bool IsVisibleSave { get; set; }
	[Parameter]
	public string FlowFor { get; set; } = string.Empty;
	[Parameter]
	public List<FlowParameter>? PrepropertyList { get; set; }
	[Parameter]
	public EventCallback<bool> IsVisibleChanged { get; set; }


	private DynamicFlowComponentResponseDto dynamicFlow = new();
	private List<DynamicFlowComponentPropertiesResponseDto> flowProperties = new();
	private DynamicFlowComponentRequestDto flowRequestApi = new();
	private List<GenericGroups>? groupId;
	private List<ApiUrls>? endPoints;
	private List<GenericKeyValueResponseDto>? keyValueResponseDtos;
	private Dictionary<int, List<GenericKeyValueResponseDto>> prepropertyKeyValue = new();
	private Dictionary<int, List<GenericKeyValueResponseDto>> onChangeKeyValue = new();
	private Dictionary<string, object> FormState { get; set; } = new();
	private Dictionary<string, object> CheckState { get; set; } = new();
	private Dictionary<string, string> ValidateMessage { get; set; } = new();
	private string DialogVisibility => IsVisible ? "display: flex;" : "display: none;";
	private string SaveButtonVisibility => IsVisibleSave ? "display: flex;" : "display: none;";
	private string SuccessMessage = "";
	private bool IsFormValidated = false;
	private bool IsSuccess = false;
	private bool showform = false;
	private bool isLoading = false;

	protected override async Task OnInitializedAsync()
	{
		IsVisibleSave = true;
		showform = true;
		flowRequestApi.Title = FlowFor;
		endPoints = await _repository.GetUrls("http://localhost:5268/api/dynamic/geturls");
		flowRequestApi.Url = GetUrl("GetFlow");
		dynamicFlow = await _repository.GetFlow(flowRequestApi);
		flowProperties = dynamicFlow?.Properties ?? new List<DynamicFlowComponentPropertiesResponseDto>();
		groupId = flowProperties.Select(item => new GenericGroups { Id = item.PropertyGroupId })
			.DistinctBy(uniqueGroupId => uniqueGroupId.Id)
			.ToList();
		await PreloadScriptData();
	}

	private async Task PreloadScriptData()
	{
		foreach (var property in flowProperties)
		{
			if (property.IsPreload.Equals(true) && !string.IsNullOrEmpty(property.ListScript))
			{
				var requestDto = new GenericKeyValueRequestDto();
				requestDto.ConnectionString = dynamicFlow?.Flow?.ConnectionString ?? "";
				requestDto.Script = property.ListScript;
				requestDto.LanguageId = GetLanguage("LanguageId");
				var keyValue = await GetKeyValue(requestDto);
				prepropertyKeyValue.Add(property.FlowPropertyId ?? 0, keyValue);
			}
			if (property.IsRequired.Equals(true))
			{
				ValidateMessage.Add(property.FlowPropertyId.ToString() ?? "0", property.ErrorMessage ?? "");
				if (property.IsPreproperty.Equals(false) && property.IsVisible.Equals(false))
				{
					FormState.Add(property.FlowPropertyId.ToString() ?? "0", dynamicFlow?.Flow?.Id ?? 0);
				}
			}
			if (property.IsPreproperty.Equals(true))
			{
				foreach (var item in PrepropertyList ?? new List<FlowParameter>())
				{
					if (item.Title.Equals(property.Parameter))
					{
						FormState.Add(property.FlowPropertyId.ToString() ?? "0", item.Value ?? "");
					}
				}
			}
		}
	}
	private void PostloadPreproperty()
	{
		foreach (var property in flowProperties)
		{
			if (property.IsRequired.Equals(true))
			{
				if (property.IsPreproperty.Equals(false) && property.IsVisible.Equals(false))
				{
					if (!FormState.ContainsKey(property.FlowPropertyId.ToString() ?? ""))
					{
						FormState.Add(property.FlowPropertyId.ToString() ?? "0", dynamicFlow?.Flow?.Id ?? 0);
					}

				}
			}
			if (property.IsPreproperty.Equals(true))
			{
				foreach (var item in PrepropertyList ?? new List<FlowParameter>())
				{
					if (item.Title.Equals(property.Parameter) && !FormState.ContainsKey(property.FlowPropertyId.ToString() ?? ""))
					{
						FormState.Add(property.FlowPropertyId.ToString() ?? "0", item.Value ?? "");
					}
				}
			}
		}
	}

	private async Task<List<GenericKeyValueResponseDto>> GetKeyValue(GenericKeyValueRequestDto requestDto)
	{
		requestDto.Url = GetUrl("GetKeyValue");
		keyValueResponseDtos = new List<GenericKeyValueResponseDto>();
		keyValueResponseDtos = await _repository.GetKeyValue(requestDto);
		return keyValueResponseDtos;
	}

	private async Task OnSelectChange(string selectedId, string propertyId)
	{
		var requestDto = new GenericKeyValueRequestDto();
		var keyValue = new List<GenericKeyValueResponseDto>();
		requestDto.ConnectionString = dynamicFlow?.Flow?.ConnectionString ?? "";

		foreach (var property in dynamicFlow?.Properties ?? throw new NullModelException())
		{
			if (property.ParentPropertyId.Equals(int.Parse(propertyId)))
			{
				if (onChangeKeyValue.ContainsKey(property?.FlowPropertyId ?? 0))
				{
					onChangeKeyValue.Remove(property?.FlowPropertyId ?? 0);
				}
				requestDto.Script = property?.ListScript ?? "";
				requestDto.Value = selectedId;
				keyValue = await GetKeyValue(requestDto);
				onChangeKeyValue.Add(property?.FlowPropertyId ?? 0, keyValue);
			}
		}
	}

	private async Task SaveButton()
	{
		isLoading = true;
		IsFormValidated = true;
		DynamicFlowComponentSaveRequestDto requestDto = new();
		requestDto.Script = dynamicFlow?.Flow?.Script ?? throw new NullModelException();
		requestDto.ConnectionString = dynamicFlow?.Flow?.ConnectionString ?? throw new NullModelException();
		requestDto.LanguageId = string.IsNullOrEmpty(requestDto.LanguageId) ? GetLanguage("LanguageId") : requestDto.LanguageId;
		requestDto.UserId = string.IsNullOrEmpty(requestDto.UserId) ? GetLanguage("UserId") : requestDto.UserId;
		requestDto.parameterValue = new List<GenericParameterValueResponseDto>();
		int requiredFields = dynamicFlow?.Properties?.Count(x => x.IsRequired == true && x.PropertyType != "label") ?? 0;
		string requestParameter = string.Empty;
		if (FormState.Count != requiredFields)
		{
			PostloadPreproperty();
		}
		if (FormState.Count == requiredFields)
		{
			ValidateMessage.Clear();
			foreach (var control in FormState)
			{
				foreach (var property in flowProperties)
				{
					if (property.FlowPropertyId.Equals(int.Parse(control.Key)))
					{
						GenericParameterValueResponseDto genericParameterValue = new();
						genericParameterValue.Parameter = property.Parameter.ToString();
						genericParameterValue.DataType = property.DataType;
						genericParameterValue.Value = control.Value?.ToString() ?? throw new NullModelException();
						if (property.DataType.Equals("checkbox") && !genericParameterValue.Value.Contains(','))
						{
							genericParameterValue.Value = genericParameterValue.Value + ",";
						}
						requestDto.parameterValue.Add(genericParameterValue);
						requestParameter = property.DataType.Equals("varchar") ? requestParameter + "'" + genericParameterValue.Value + "'" + "," : requestParameter + genericParameterValue.Value + ",";
						break;
					}
				}
			}
			if (!string.IsNullOrEmpty(requestParameter))
			{
				requestParameter = requestParameter.TrimEnd(',');
				GenericParameterValueResponseDto genericParameterValue = new();
				genericParameterValue.Parameter = "Params";
				genericParameterValue.DataType = "80";
				genericParameterValue.Value = requestParameter;
				requestDto.parameterValue.Add(genericParameterValue);

			}
			if (ValidateMessage.Count > 0)
			{
				isLoading = false;
				return;
			}
			else
			{
				IsVisibleSave = false;
				requestDto.Url = GetUrl("SaveFlow");
				var responseDto = await _repository.SaveFlow(requestDto);
				showform = false;

				if (responseDto.ResponseCode.Equals("00"))
				{
					IsSuccess = true;
				}
				else
				{
					IsSuccess = false;
					IsVisibleSave = true;
				}
				SuccessMessage = responseDto.ResponseMessage;
				isLoading = false;

			}
		}
		else
		{

			IsSuccess = false;
			foreach (var property in flowProperties)
			{
				ValidateField(property);
			}
			isLoading = false;

		}
	}

	private async void CloseForm()
	{
		IsSuccess = false;
		IsFormValidated = false;
		SuccessMessage = string.Empty;
		ValidateMessage.Clear();
		FormState.Clear();
		StateHasChanged();
		IsVisible = false;
		showform = true;
		await IsVisibleChanged.InvokeAsync(IsVisible);
	}

	private string GetUrl(string key)
	{
		return endPoints?.Where(i => i.Key == key)
									.Select(i => i.Url)
									.FirstOrDefault() ?? "";
	}

	private string GetLanguage(string key)
	{
		return PrepropertyList?
		.Where(i => i.Title == key)
		.Select(i => i.Value)
		.FirstOrDefault()?.ToString() ?? "";
	}

	private void ValidateField(DynamicFlowComponentPropertiesResponseDto item)
	{
		string fieldId = item?.FlowPropertyId?.ToString() ?? "";

		if (item?.IsRequired == true)
		{
			if (!FormState.TryGetValue(fieldId, out var value) || string.IsNullOrWhiteSpace(value?.ToString()))
			{
				ValidateMessage[fieldId] = item.ErrorMessage;
			}
			else
			{
				ValidateMessage.Remove(fieldId);
			}
		}
	}

	private void CancelButton()
	{
		FormState.Clear();
		StateHasChanged();
	}

	private RenderFragment RenderControls(DynamicFlowResponseDto flow, List<DynamicFlowComponentPropertiesResponseDto> element) => builder =>
	{
		bool elementOpen = false;
		int index = 0;
		if (!showform && IsSuccess == true)
		{
			builder.OpenElement(index++, "div");
			builder.OpenElement(index++, "div");
			builder.AddAttribute(index++, "class", "alert alert-success");
			builder.AddContent(index++, SuccessMessage);
			builder.CloseElement();
			builder.CloseElement();
		}
		else
		{
			if (!showform && IsSuccess != true)
			{
				builder.OpenElement(index++, "div");
				builder.OpenElement(index++, "div");
				builder.AddAttribute(index++, "class", "alert alert-danger");
				builder.AddContent(index++, SuccessMessage);
				builder.CloseElement();
				builder.CloseElement();
			}
			foreach (var group in groupId ?? throw new NullModelException())
			{
				foreach (var item in element)
				{
					if (item.PropertyGroupId.Equals(group.Id))
					{
						if (!elementOpen)
						{
							elementOpen = true;
							builder.OpenElement(index++, "div");
							builder.AddAttribute(index++, "class", "mb-3");
						}
						switch (item.PropertyType)
						{
							case "label":
								builder.OpenElement(index++, "label");
								if (item.IsVisible.Equals(false))
								{
									builder.AddAttribute(index++, "hidden");
								}
								builder.AddAttribute(index++, "class", "form-label");
								builder.AddContent(index++, item.ControlText);
								if (item?.IsRequired == true)
								{
									builder.AddMarkupContent(index++, "<span style='color:red; margin-left: 5px;'>*</span>");
									if (IsFormValidated && ValidateMessage.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var message))
									{
										builder.OpenElement(index++, "span");
										builder.AddAttribute(index++, "style", "width: 250px; color: red; font-size: 0.9em; margin-left: 5px;");
										builder.AddContent(index++, message);
										builder.CloseElement();
									}
								}
								builder.CloseElement();
								break;

							case "text":
								if (item.IsVisible.Equals(false) && !string.IsNullOrEmpty(item.AlwaysDefaultValue))
								{
									FormState[item?.FlowPropertyId?.ToString() ?? ""] = item?.AlwaysDefaultValue ?? "";
								}
								builder.OpenElement(index++, "div");
								if (item?.IsVisible == false)
								{
									builder.AddAttribute(index++, "hidden");
								}
								builder.AddAttribute(index++, "style", "display: flex; align-items: center;");
								builder.OpenElement(index++, "input");
								builder.AddAttribute(index++, "type", "text");
								builder.AddAttribute(index++, "class", "form-control");
								if (FormState.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var textValue))
								{
									builder.AddAttribute(index++, "value", textValue.ToString());
								}
								builder.AddAttribute(index++, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
								{
									FormState[item?.FlowPropertyId?.ToString() ?? ""] = e?.Value?.ToString() ?? "";
								}));
								builder.CloseElement();
								builder.CloseElement();
								if (item?.IsRequired == true)
								{
									if (IsFormValidated && ValidateMessage.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var message))
									{
										builder.OpenElement(index++, "div");
										builder.AddAttribute(index++, "style", "color: red; font-size: 0.9em; margin-top: 5px;");
										builder.AddContent(index++, message);
										builder.CloseElement();
									}
								}
								break;

							case "radio":
								if (item.IsVisible.Equals(false) && !string.IsNullOrEmpty(item.AlwaysDefaultValue))
								{
									FormState[item.FlowPropertyId?.ToString() ?? ""] = int.Parse(item.AlwaysDefaultValue);
								}
								foreach (var control in prepropertyKeyValue)
								{
									if (control.Key.Equals(item?.FlowPropertyId))
									{
										builder.OpenElement(index++, "div");
										if (item.IsVisible.Equals(false))
										{
											builder.AddAttribute(index++, "hidden");
										}
										builder.AddAttribute(index++, "style", "display: flex; flex-wrap: wrap; gap: 10px; align-items: center;");
										foreach (var prop in control.Value)
										{
											builder.OpenElement(index++, "input");
											builder.AddAttribute(index++, "class", "form-check-label");
											builder.AddAttribute(index++, "type", "radio");
											builder.AddAttribute(index++, "name", $"rg_{item?.PropertyGroupId}");
											builder.AddAttribute(index++, "value", prop.Key);
											if (FormState.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var selectedValue) && (int)selectedValue == prop.Key)
											{
												builder.AddAttribute(index++, "checked", true);
											}
											builder.AddAttribute(index++, "class", "form-check-input");
											builder.AddAttribute(index++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
								{
									FormState[item?.FlowPropertyId?.ToString() ?? ""] = int.Parse(e.Value?.ToString() ?? "0");
								}));
											builder.CloseElement();
											builder.OpenElement(index++, "label");
											builder.AddAttribute(index++, "class", "form-check-label");
											builder.AddContent(index++, prop.Value);
											builder.CloseElement();
										}
										builder.CloseElement();
										if (item?.IsRequired == true)
										{
											if (IsFormValidated && ValidateMessage.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var message))
											{
												builder.OpenElement(index++, "div");
												builder.AddAttribute(index++, "style", "color: red; font-size: 0.9em; margin-top: 5px;");
												builder.AddContent(index++, message);
												builder.CloseElement();
											}
										}

									}
								}
								break;
							case "date":
								if (item.IsVisible.Equals(false) && !string.IsNullOrEmpty(item.AlwaysDefaultValue))
								{
									FormState[item?.FlowPropertyId?.ToString() ?? ""] = item?.AlwaysDefaultValue ?? "";
								}
								builder.OpenElement(index++, "div");
								builder.AddAttribute(index++, "style", "display: flex; align-items: center;");
								if (item?.IsVisible == false)
								{
									builder.AddAttribute(index++, "hidden");
								}
								builder.OpenElement(index++, "input");
								builder.AddAttribute(index++, "type", "date");
								builder.AddAttribute(index++, "class", "form-control");
								if (FormState.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var dateValue))
								{
									builder.AddAttribute(index++, "value", dateValue.ToString());
								}
								builder.AddAttribute(index++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
								{
									FormState[item?.FlowPropertyId?.ToString() ?? ""] = e?.Value?.ToString() ?? "";
								}));
								builder.CloseElement();
								builder.CloseElement();
								if (item?.IsRequired == true)
								{
									if (IsFormValidated && ValidateMessage.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var message))
									{
										builder.OpenElement(index++, "div");
										builder.AddAttribute(index++, "style", "color: red; font-size: 0.9em; margin-top: 5px;");
										builder.AddContent(index++, message);
										builder.CloseElement();
									}
								}
								break;
							case "textarea":
								if (item.IsVisible.Equals(false) && !string.IsNullOrEmpty(item.AlwaysDefaultValue))
								{
									FormState[item?.FlowPropertyId?.ToString() ?? ""] = item?.AlwaysDefaultValue ?? "";
								}
								builder.OpenElement(index++, "div");
								builder.AddAttribute(index++, "style", "display: flex; align-items: center;");
								builder.OpenElement(index++, "textarea");
								if (item?.IsVisible == false)
								{
									builder.AddAttribute(index++, "hidden");
								}
								builder.AddAttribute(index++, "rows", "3");
								builder.AddAttribute(index++, "class", "form-control");
								if (FormState.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var textareaValue))
								{
									builder.AddAttribute(index++, "value", textareaValue?.ToString() ?? "");
								}
								builder.AddAttribute(index++, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
						{
							FormState[item?.FlowPropertyId?.ToString() ?? ""] = e?.Value?.ToString() ?? "";
						}));
								builder.CloseElement();

								builder.CloseElement();
								if (item?.IsRequired == true)
								{
									if (IsFormValidated && ValidateMessage.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var message))
									{
										builder.OpenElement(index++, "div");
										builder.AddAttribute(index++, "style", "color: red; font-size: 0.9em; margin-top: 5px;");
										builder.AddContent(index++, message);
										builder.CloseElement();
									}
								}

								break;
							case "select":
								if (item.IsVisible.Equals(false) && !string.IsNullOrEmpty(item.AlwaysDefaultValue))
								{
									FormState[item?.FlowPropertyId?.ToString() ?? ""] = item?.AlwaysDefaultValue ?? "";
								}
								builder.OpenElement(index++, "div");
								builder.AddAttribute(index++, "style", "display: flex; align-items: center;");
								if (item?.IsVisible == false)
								{
									builder.AddAttribute(index++, "hidden");
								}
								builder.OpenElement(index++, "select");
								builder.AddAttribute(index++, "class", "form-control");
								builder.AddAttribute(index++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
									{
										var selectedId = e.Value?.ToString();
										FormState[item?.FlowPropertyId?.ToString() ?? ""] = selectedId ?? "";
										await OnSelectChange(selectedId ?? "", item?.FlowPropertyId?.ToString() ?? "");
									}));
								if (item?.IsPreload == true)
								{
									foreach (var control in prepropertyKeyValue)
									{
										if (control.Key.Equals(item?.FlowPropertyId))
										{
											builder.OpenElement(index++, "option");
											builder.AddAttribute(index++, "value", "0");
											if (
												!FormState.ContainsKey(item?.FlowPropertyId?.ToString() ?? "") ||
												FormState[item?.FlowPropertyId?.ToString() ?? ""]?.ToString() == "0")
											{
												builder.AddAttribute(index++, "selected", true);
											}

											builder.AddContent(index++, "-- Select --");
											builder.CloseElement();
											foreach (var prop in control.Value)
											{
												builder.OpenElement(index++, "option");
												builder.AddAttribute(index++, "value", prop.Key);
												if (FormState.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var selectedOption) && selectedOption.ToString() == prop.Key.ToString())
												{
													builder.AddAttribute(index++, "selected", true);
												}
												builder.AddContent(index++, prop.Value);
												builder.CloseElement();
											}
										}
									}
								}
								else
								{
									foreach (var onchange in onChangeKeyValue)
									{
										if (onchange.Key.Equals(item?.FlowPropertyId))
										{
											builder.OpenElement(index++, "option");
											builder.AddAttribute(index++, "value", "0");
											if (!FormState.ContainsKey(item?.FlowPropertyId?.ToString() ?? "") ||
											FormState[item?.FlowPropertyId?.ToString() ?? ""]?.ToString() == "0")
											{
												builder.AddAttribute(index++, "selected", true);
											}

											builder.AddContent(index++, "-- Select --");
											builder.CloseElement();
											foreach (var value in onchange.Value)
											{
												builder.OpenElement(index++, "option");
												builder.AddAttribute(index++, "value", value.Key);
												if (FormState.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var selectedOption) && selectedOption.ToString() == value.Key.ToString())
												{
													builder.AddAttribute(index++, "selected", true);
												}
												builder.AddContent(index++, value.Value);
												builder.CloseElement();
											}
										}
									}
								}
								builder.CloseElement();
								builder.CloseElement();
								if (item?.IsRequired == true)
								{
									if (IsFormValidated && ValidateMessage.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var message))
									{
										builder.OpenElement(index++, "div");
										builder.AddAttribute(index++, "style", "color: red; font-size: 0.9em; margin-top: 5px;");
										builder.AddContent(index++, message);
										builder.CloseElement();
									}
								}
								break;

							case "checkbox":
								if (item.IsVisible.Equals(false) && !string.IsNullOrEmpty(item.AlwaysDefaultValue))
								{
									FormState[item.FlowPropertyId?.ToString() ?? ""] = item.AlwaysDefaultValue;
								}
								foreach (var control in prepropertyKeyValue)
								{
									if (control.Key.Equals(item?.FlowPropertyId))
									{
										builder.OpenElement(index++, "div");
										builder.AddAttribute(index++, "style", "display: flex; flex-wrap: wrap; gap: 10px; align-items: center;");
										if (item.IsVisible.Equals(false))
										{
											builder.AddAttribute(index++, "hidden");
										}
										foreach (var prop in control.Value)
										{
											bool isChecked = false;
											if (FormState.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var selectedValues))
											{
												var selectedList = selectedValues?.ToString()?.Split(',').ToList();
												if (selectedList is not null)
													if (selectedList is not null)
													{
														isChecked = selectedList.Contains(prop?.Key?.ToString() ?? "");
													}
											}
											builder.OpenElement(index++, "input");
											builder.AddAttribute(index++, "type", "checkbox");
											builder.AddAttribute(index++, "class", "form-check-input");
											builder.AddAttribute(index++, "value", prop?.Key);
											builder.AddAttribute(index++, "checked", isChecked);
											builder.AddAttribute(index++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
											{
												var updatedValues = new List<string>();
												if (FormState.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var storedValues))
												{
													updatedValues = storedValues?.ToString()?.Split(',').ToList();
												}
												if (e.Value is not null && (bool)e.Value && updatedValues is not null && !updatedValues.Contains(prop?.Key?.ToString() ?? ""))
												{
													updatedValues.Add(prop?.Key?.ToString() ?? "");
												}
												else if (updatedValues is not null && updatedValues.Contains(prop?.Key?.ToString() ?? ""))
												{
													updatedValues.Remove(prop?.Key?.ToString() ?? "");
												}
												FormState[item?.FlowPropertyId?.ToString() ?? ""] = string.Join(",", updatedValues ?? new List<string>());
											}));
											builder.CloseElement();
											builder.OpenElement(index++, "label");
											builder.AddAttribute(index++, "class", "form-check-label");
											builder.AddContent(index++, prop?.Value);
											builder.CloseElement();
										}
										builder.CloseElement();
										if (item?.IsRequired == true)
										{
											if (IsFormValidated && ValidateMessage.TryGetValue(item?.FlowPropertyId?.ToString() ?? "", out var message))
											{
												builder.OpenElement(index++, "div");
												builder.AddAttribute(index++, "style", "color: red; font-size: 0.9em; margin-top: 5px;");
												builder.AddContent(index++, message);
												builder.CloseElement();
											}
										}

									}
								}
								break;

							default:
								break;
						}
					}
					else
					{
						if (elementOpen)
						{
							elementOpen = false;
							builder.CloseElement();
						}
					}
				}

				if (elementOpen)
				{
					elementOpen = false;
					builder.CloseElement();
				}
			}
			if (isLoading)
			{
				builder.OpenElement(index++, "div");
				builder.AddAttribute(index++, "class", "loader-overlay");
				builder.OpenElement(index++, "div");
				builder.AddAttribute(index++, "class", "loader");
				builder.CloseElement();
				builder.CloseElement();
			}
		}
	};
} *@